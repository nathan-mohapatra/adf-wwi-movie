{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "antra-sep-data-factory"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/silverUpdate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "movie"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "bronze_movie_tmp",
								"type": "DatasetReference"
							},
							"name": "bronze"
						},
						{
							"dataset": {
								"referenceName": "silver_movie_tmp",
								"type": "DatasetReference"
							},
							"name": "silver"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "silver_movie",
								"type": "DatasetReference"
							},
							"name": "updateSilver"
						},
						{
							"dataset": {
								"referenceName": "bronze_movie",
								"type": "DatasetReference"
							},
							"name": "updateBronze"
						}
					],
					"transformations": [
						{
							"name": "filterLoaded"
						},
						{
							"name": "select1"
						},
						{
							"name": "parseJson"
						},
						{
							"name": "flattenJson"
						},
						{
							"name": "addForeignKeys"
						},
						{
							"name": "select2"
						},
						{
							"name": "filterBudget"
						},
						{
							"name": "filterRuntime"
						},
						{
							"name": "repairRuntime"
						},
						{
							"name": "repairBudget"
						},
						{
							"name": "unionRepaired"
						},
						{
							"name": "unionSilver"
						},
						{
							"name": "distinctRaw"
						},
						{
							"name": "statusLoaded"
						}
					],
					"scriptLines": [
						"source(output(",
						"          value as string,",
						"          datasource as string,",
						"          ingestdate as date,",
						"          ingesttime as timestamp,",
						"          status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> bronze",
						"source(output(",
						"          value as string,",
						"          movie_id as integer,",
						"          title as string,",
						"          overview as string,",
						"          tagline as string,",
						"          budget as double,",
						"          revenue as double,",
						"          imdb_url as string,",
						"          tmdb_url as string,",
						"          poster_url as string,",
						"          backdrop_url as string,",
						"          original_language_id as integer,",
						"          release_date as date,",
						"          runtime as integer,",
						"          price as double,",
						"          created_date as date,",
						"          genre_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> silver",
						"bronze filter(status == \"quarantined\") ~> filterLoaded",
						"filterLoaded select(mapColumn(",
						"          value",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 parse(nested_json = value ? (Id as integer,     Title as string,     Overview as string,     Tagline as string,     Budget as double,     Revenue as double,     ImdbUrl as string,     TmdbUrl as string,     PosterUrl as string,     BackdropUrl as string,     OriginalLanguage as string,     ReleaseDate as date,     RunTime as integer,     Price as double,     CreatedDate as date,     genres as (id as integer,     name as string)[])[],",
						"     format: 'json',",
						"     documentForm: 'documentPerLine') ~> parseJson",
						"parseJson foldDown(unroll(nested_json),",
						"     mapColumn(",
						"          value,",
						"          Id = nested_json.Id,",
						"          Title = nested_json.Title,",
						"          Overview = nested_json.Overview,",
						"          Tagline = nested_json.Tagline,",
						"          Budget = nested_json.Budget,",
						"          Revenue = nested_json.Revenue,",
						"          ImdbUrl = nested_json.ImdbUrl,",
						"          TmdbUrl = nested_json.TmdbUrl,",
						"          PosterUrl = nested_json.PosterUrl,",
						"          BackdropUrl = nested_json.BackdropUrl,",
						"          OriginalLanguage = nested_json.OriginalLanguage,",
						"          ReleaseDate = nested_json.ReleaseDate,",
						"          RunTime = nested_json.RunTime,",
						"          Price = nested_json.Price,",
						"          CreatedDate = nested_json.CreatedDate,",
						"          genres = nested_json.genres",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenJson",
						"flattenJson derive(genre_id = toString(genres.id),",
						"          original_language_id = 1) ~> addForeignKeys",
						"addForeignKeys select(mapColumn(",
						"          value,",
						"          movie_id = Id,",
						"          title = Title,",
						"          overview = Overview,",
						"          tagline = Tagline,",
						"          budget = Budget,",
						"          revenue = Revenue,",
						"          imdb_url = ImdbUrl,",
						"          tmdb_url = TmdbUrl,",
						"          poster_url = PosterUrl,",
						"          backdrop_url = BackdropUrl,",
						"          original_language_id,",
						"          release_date = ReleaseDate,",
						"          runtime = RunTime,",
						"          price = Price,",
						"          created_date = CreatedDate,",
						"          genre_id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 filter(budget < 1000000) ~> filterBudget",
						"select2 filter(runtime < 0 && budget >= 1000000) ~> filterRuntime",
						"filterRuntime derive(runtime = abs(runtime)) ~> repairRuntime",
						"filterBudget derive(budget = 1000000.00,",
						"          runtime = abs(runtime)) ~> repairBudget",
						"repairRuntime, repairBudget union(byName: true)~> unionRepaired",
						"unionRepaired, silver union(byName: true)~> unionSilver",
						"unionSilver aggregate(groupBy(value),",
						"     each(match(name!=\"value\"), $$ = first($$))) ~> distinctRaw",
						"bronze derive(status = \"loaded\") ~> statusLoaded",
						"distinctRaw sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> updateSilver",
						"statusLoaded sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> updateBronze"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/quarantined_bronze_to_silver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "silverUpdate",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "silverUpdate",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"bronze": {},
									"silver": {},
									"updateSilver": {},
									"updateBronze": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "delete_bronze_tmp",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "silverUpdate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "bronze_movie_tmp",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "ls_AzureDataLakeStorage",
									"type": "LinkedServiceReference"
								}
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "delete_silver_tmp",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "delete_bronze_tmp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "silver_movie_tmp",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "ls_AzureDataLakeStorage",
									"type": "LinkedServiceReference"
								}
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "movie"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/silverUpdate')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/raw_to_bronze_to_silver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ingest_raw",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "movie_*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "raw_movie_src",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "raw_movie",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "rawToBronze",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ingest_raw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "rawToBronze",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"raw": {},
									"bronze": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "bronzeToSilver",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "rawToBronze",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "bronzeToSilver",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"bronze": {},
									"genres": {},
									"originalLanguages": {},
									"updateBronze": {},
									"silver": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "movie"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/wide_world_importers')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "iterate_oltp",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "drop_ods",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.table_list",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "old_watermark",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT * FROM watermarktable WHERE TableName = '@{item().TABLE_NAME}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "watermark_dataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "new_watermark",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "SELECT MAX(@{item().WaterMark_Column}) AS NewWatermarkvalue FROM @{item().TABLE_NAME}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "source_dataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "incremental_copy",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "new_watermark",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "old_watermark",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select * from @{item().TABLE_NAME} where @{item().WaterMark_Column} > '@{activity('old_watermark').output.firstRow.WatermarkValue}' and @{item().WaterMark_Column} <= '@{activity('new_watermark').output.firstRow.NewWatermarkvalue}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"sqlWriterStoredProcedureName": {
												"value": "@{item().StoredProcedureNameForMergeOperation}",
												"type": "Expression"
											},
											"sqlWriterTableType": {
												"value": "@{item().TableType}",
												"type": "Expression"
											},
											"storedProcedureTableTypeParameterName": {
												"value": "@{item().TABLE_NAME}",
												"type": "Expression"
											},
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "source_dataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "sink_dataset",
											"type": "DatasetReference",
											"parameters": {
												"sink_table_name": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "sp_write_watermark",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "incremental_copy",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[usp_write_watermark]",
										"storedProcedureParameters": {
											"LastModifiedtime": {
												"value": {
													"value": "@{activity('new_watermark').output.firstRow.NewWatermarkvalue}",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"TableName": {
												"value": {
													"value": "\t@{activity('old_watermark').output.firstRow.TableName}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_AzureSqlDatabase_OLTP",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "ods_copy",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "sp_write_watermark",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "sink_dataset",
											"type": "DatasetReference",
											"parameters": {
												"sink_table_name": {
													"value": "@{activity('old_watermark').output.firstRow.TableName}",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ods",
											"type": "DatasetReference",
											"parameters": {
												"ods_table_name": {
													"value": "@{activity('old_watermark').output.firstRow.TableName}",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "drop_ods",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[drop_ods_tables]"
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureSqlDatabase_ODS",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"table_list": {
						"type": "array",
						"defaultValue": [
							{
								"TABLE_NAME": "orders_table",
								"WaterMark_Column": "LastEditedWhen",
								"TableType": "DataTypeforOrdersTable",
								"StoredProcedureNameForMergeOperation": "usp_upsert_orders_table"
							},
							{
								"TABLE_NAME": "order_lines_table",
								"WaterMark_Column": "LastEditedWhen",
								"TableType": "DataTypeforOrderLinesTable",
								"StoredProcedureNameForMergeOperation": "usp_upsert_order_lines_table"
							}
						]
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/movie')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_bronze_to_silver",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "raw_to_bronze_to_silver",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "quarantined_bronze_to_silver",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_bronze_to_silver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "quarantined_bronze_to_silver",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "movie"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/raw_to_bronze_to_silver')]",
				"[concat(variables('factoryId'), '/pipelines/quarantined_bronze_to_silver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "movie",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "movie",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "wide_world_importers",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "movie",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "wide_world_importers",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/movie')]",
				"[concat(variables('factoryId'), '/pipelines/wide_world_importers')]"
			]
		}
	]
}