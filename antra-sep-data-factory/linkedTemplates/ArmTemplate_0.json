{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "antra-sep-data-factory"
		},
		"ls_AzureDataLakeStorage_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_AzureDataLakeStorage'"
		},
		"ls_AzureDataLakeStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://antrasepadlsgen2.dfs.core.windows.net"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ls_AzureDataLakeStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_AzureDataLakeStorage_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_AzureDataLakeStorage_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_movie')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "bronze-movie"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "value",
						"type": "UTF8"
					},
					{
						"name": "datasource",
						"type": "UTF8"
					},
					{
						"name": "ingestdate",
						"type": "DATE"
					},
					{
						"name": "ingesttime",
						"type": "INT96"
					},
					{
						"name": "status",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/genres')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "genres",
						"fileSystem": "silver-movie"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/original_languages')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "original-languages",
						"fileSystem": "silver-movie"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/raw_movie')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "movie.json",
						"fileSystem": "raw-movie"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"movie": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"Id": {
										"type": "integer"
									},
									"Title": {
										"type": "string"
									},
									"Overview": {
										"type": "string"
									},
									"Tagline": {
										"type": "string"
									},
									"Budget": {
										"type": "number"
									},
									"Revenue": {
										"type": "number"
									},
									"ImdbUrl": {
										"type": "string"
									},
									"TmdbUrl": {
										"type": "string"
									},
									"PosterUrl": {
										"type": "string"
									},
									"BackdropUrl": {
										"type": "string"
									},
									"OriginalLanguage": {
										"type": "string"
									},
									"ReleaseDate": {
										"type": "string"
									},
									"RunTime": {
										"type": "integer"
									},
									"Price": {
										"type": "number"
									},
									"CreatedDate": {
										"type": "string"
									},
									"UpdatedDate": {
										"type": "null"
									},
									"UpdatedBy": {
										"type": "null"
									},
									"CreatedBy": {
										"type": "null"
									},
									"genres": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"name": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/raw_movie_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "movie_*.json",
						"fileSystem": "raw-movie"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/silver_movie')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "movie",
						"fileSystem": "silver-movie"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronzeToSilver')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "bronze_movie",
								"type": "DatasetReference"
							},
							"name": "bronze"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "silver_movie",
								"type": "DatasetReference"
							},
							"name": "silver"
						}
					],
					"transformations": [
						{
							"name": "filterStatus"
						},
						{
							"name": "parseJson"
						},
						{
							"name": "flattenJson"
						},
						{
							"name": "select1"
						},
						{
							"name": "addForeignKeys"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          value as string,",
						"          datasource as string,",
						"          ingestdate as date,",
						"          ingesttime as timestamp,",
						"          status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> bronze",
						"bronze filter(status == \"new\") ~> filterStatus",
						"select1 parse(nested_json = value ? (Id as integer,",
						"     Title as string,",
						"     Overview as string,",
						"     Tagline as string,",
						"     Budget as integer,",
						"     Revenue as integer,",
						"     ImdbUrl as string,",
						"     TmdbUrl as string,",
						"     PosterUrl as string,",
						"     BackdropUrl as string,",
						"     OriginalLanguage as string,",
						"     ReleaseDate as string,",
						"     RunTime as integer,",
						"     Price as integer,",
						"     CreatedDate as string,",
						"     genres as (id as integer,",
						"     name as string)[])[],",
						"     format: 'json',",
						"     documentForm: 'documentPerLine') ~> parseJson",
						"parseJson foldDown(unroll(nested_json),",
						"     mapColumn(",
						"          value,",
						"          Id = nested_json.Id,",
						"          Title = nested_json.Title,",
						"          Overview = nested_json.Overview,",
						"          Tagline = nested_json.Tagline,",
						"          Budget = nested_json.Budget,",
						"          Revenue = nested_json.Revenue,",
						"          ImdbUrl = nested_json.ImdbUrl,",
						"          TmdbUrl = nested_json.TmdbUrl,",
						"          PosterUrl = nested_json.PosterUrl,",
						"          BackdropUrl = nested_json.BackdropUrl,",
						"          OriginalLanguage = nested_json.OriginalLanguage,",
						"          ReleaseDate = nested_json.ReleaseDate,",
						"          RunTime = nested_json.RunTime,",
						"          Price = nested_json.Price,",
						"          CreatedDate = nested_json.CreatedDate,",
						"          genres = nested_json.genres",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenJson",
						"filterStatus select(mapColumn(",
						"          value",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"flattenJson derive(genre_id = genres.id,",
						"          original_language_id = 1) ~> addForeignKeys",
						"addForeignKeys select(mapColumn(",
						"          value,",
						"          Id,",
						"          Title,",
						"          Overview,",
						"          Tagline,",
						"          Budget,",
						"          Revenue,",
						"          ImdbUrl,",
						"          TmdbUrl,",
						"          PosterUrl,",
						"          BackdropUrl,",
						"          original_language_id,",
						"          ReleaseDate,",
						"          RunTime,",
						"          Price,",
						"          CreatedDate,",
						"          genre_id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> silver"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/bronze_movie')]",
				"[concat(variables('factoryId'), '/datasets/silver_movie')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/getGenres')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "bronze_movie",
								"type": "DatasetReference"
							},
							"name": "bronze"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "genres",
								"type": "DatasetReference"
							},
							"name": "genres"
						}
					],
					"transformations": [
						{
							"name": "parse"
						},
						{
							"name": "flattenJson"
						},
						{
							"name": "select1"
						},
						{
							"name": "flattenGenres"
						},
						{
							"name": "DistinctRows"
						},
						{
							"name": "filterNull"
						},
						{
							"name": "select2"
						},
						{
							"name": "sort"
						}
					],
					"scriptLines": [
						"source(output(",
						"          value as string,",
						"          datasource as string,",
						"          ingestdate as date,",
						"          ingesttime as timestamp,",
						"          status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> bronze",
						"select1 parse(nested_json = value ? (Id as integer,",
						"     Title as string,",
						"     Overview as string,",
						"     Tagline as string,",
						"     Budget as integer,",
						"     Revenue as integer,",
						"     ImdbUrl as string,",
						"     TmdbUrl as string,",
						"     PosterUrl as string,",
						"     BackdropUrl as string,",
						"     OriginalLanguage as string,",
						"     ReleaseDate as string,",
						"     RunTime as integer,",
						"     Price as integer,",
						"     CreatedDate as string,",
						"     genres as (id as integer,",
						"     name as string)[])[],",
						"     format: 'json',",
						"     documentForm: 'documentPerLine') ~> parse",
						"parse foldDown(unroll(nested_json),",
						"     mapColumn(",
						"          genres = nested_json.genres",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenJson",
						"bronze select(mapColumn(",
						"          value",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"flattenJson foldDown(unroll(genres),",
						"     mapColumn(",
						"          id = genres.id,",
						"          name = genres.name",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenGenres",
						"flattenGenres aggregate(groupBy(mycols = sha2(256,columns())),",
						"     each(match(true()), $$ = first($$))) ~> DistinctRows",
						"DistinctRows filter(name != \"\") ~> filterNull",
						"filterNull select(mapColumn(",
						"          id,",
						"          name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sort(asc(id, true)) ~> sort",
						"sort sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> genres"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/bronze_movie')]",
				"[concat(variables('factoryId'), '/datasets/genres')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/getOriginalLanguages')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "bronze_movie",
								"type": "DatasetReference"
							},
							"name": "bronze"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "original_languages",
								"type": "DatasetReference"
							},
							"name": "originalLanguages"
						}
					],
					"transformations": [
						{
							"name": "addOriginalLanguages"
						},
						{
							"name": "select1"
						},
						{
							"name": "DistinctRows"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          value as string,",
						"          datasource as string,",
						"          ingestdate as date,",
						"          ingesttime as timestamp,",
						"          status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> bronze",
						"bronze derive(id = 1,",
						"          language = \"English\") ~> addOriginalLanguages",
						"addOriginalLanguages select(mapColumn(",
						"          id,",
						"          language",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 aggregate(groupBy(mycols = sha2(256,columns())),",
						"     each(match(true()), $$ = first($$))) ~> DistinctRows",
						"DistinctRows select(mapColumn(",
						"          id,",
						"          language",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> originalLanguages"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/bronze_movie')]",
				"[concat(variables('factoryId'), '/datasets/original_languages')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/rawToBronze')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "raw_movie",
								"type": "DatasetReference"
							},
							"name": "raw"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "bronze_movie",
								"type": "DatasetReference"
							},
							"name": "bronze"
						}
					],
					"transformations": [
						{
							"name": "flatten"
						},
						{
							"name": "stringify"
						},
						{
							"name": "addMetadata"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movie as (Id as integer, Title as string, Overview as string, Tagline as string, Budget as double, Revenue as double, ImdbUrl as string, TmdbUrl as string, PosterUrl as string, BackdropUrl as string, OriginalLanguage as string, ReleaseDate as string, RunTime as integer, Price as double, CreatedDate as string, UpdatedDate as string, UpdatedBy as string, CreatedBy as string, genres as (id as integer, name as string)[])[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> raw",
						"raw foldDown(unroll(movie),",
						"     mapColumn(",
						"          value = movie",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten",
						"flatten stringify(value = value ? string,",
						"     format: 'json') ~> stringify",
						"stringify derive(datasource = \"antrasepadlsgen2\",",
						"          ingestdate = currentDate(),",
						"          ingesttime = currentTimestamp(),",
						"          status = \"new\") ~> addMetadata",
						"addMetadata sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          value as string,",
						"          datasource as string,",
						"          ingestdate as date,",
						"          ingesttime as timestamp,",
						"          status as string",
						"     ),",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> bronze"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/raw_movie')]",
				"[concat(variables('factoryId'), '/datasets/bronze_movie')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/raw_to_bronze_to_silver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ingest_raw",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "movie_*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "raw_movie_source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "raw_movie",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "rawToBronze",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ingest_raw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "rawToBronze",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"raw": {},
									"bronze": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "getGenres",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "rawToBronze",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "getGenres",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"bronze": {},
									"genres": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "getOriginalLanguages",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "getGenres",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "getOriginalLanguages",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"bronze": {},
									"originalLanguages": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "bronzeToSilver",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "getOriginalLanguages",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "bronzeToSilver",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"bronze": {},
									"silver": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/raw_movie_source')]",
				"[concat(variables('factoryId'), '/datasets/raw_movie')]",
				"[concat(variables('factoryId'), '/dataflows/rawToBronze')]",
				"[concat(variables('factoryId'), '/dataflows/getGenres')]",
				"[concat(variables('factoryId'), '/dataflows/getOriginalLanguages')]",
				"[concat(variables('factoryId'), '/dataflows/bronzeToSilver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/movie')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_bronze_to_silver",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "raw_to_bronze_to_silver",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/raw_to_bronze_to_silver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "movie",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "movie",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/movie')]"
			]
		}
	]
}