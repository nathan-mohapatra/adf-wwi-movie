{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "antra-sep-data-factory"
		},
		"ls_AzureDataLakeStorage_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_AzureDataLakeStorage'"
		},
		"ls_AzureSqlDatabase_Integration_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_AzureSqlDatabase_Integration'"
		},
		"ls_AzureSqlDatabase_ODS_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_AzureSqlDatabase_ODS'"
		},
		"ls_AzureSqlDatabase_OLAP_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_AzureSqlDatabase_OLAP'"
		},
		"ls_AzureSqlDatabase_OLTP_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_AzureSqlDatabase_OLTP'"
		},
		"ls_SqlServer_Integration_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_SqlServer_Integration'"
		},
		"ls_SqlServer_ODS_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_SqlServer_ODS'"
		},
		"ls_SqlServer_OLAP_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_SqlServer_OLAP'"
		},
		"ls_SqlServer_OLTP_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_SqlServer_OLTP'"
		},
		"ls_AzureDataLakeStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://antrasepadlsgen2.dfs.core.windows.net"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "movie",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "movie",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "wide_world_importers",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "movie",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "wide_world_importers",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/movie')]",
				"[concat(variables('factoryId'), '/pipelines/wide_world_importers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/movie')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_bronze_to_silver",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "raw_to_bronze_to_silver",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "quarantined_bronze_to_silver",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_bronze_to_silver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "quarantined_bronze_to_silver",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "movie"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/raw_to_bronze_to_silver')]",
				"[concat(variables('factoryId'), '/pipelines/quarantined_bronze_to_silver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/quarantined_bronze_to_silver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "silverUpdate",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "silverUpdate",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"bronze": {},
									"silver": {},
									"updateSilver": {},
									"updateBronze": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "delete_bronze_tmp",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "silverUpdate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "bronze_movie_tmp",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "ls_AzureDataLakeStorage",
									"type": "LinkedServiceReference"
								}
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "delete_silver_tmp",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "delete_bronze_tmp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "silver_movie_tmp",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "ls_AzureDataLakeStorage",
									"type": "LinkedServiceReference"
								}
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "movie"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/silverUpdate')]",
				"[concat(variables('factoryId'), '/datasets/bronze_movie_tmp')]",
				"[concat(variables('factoryId'), '/datasets/silver_movie_tmp')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/raw_to_bronze_to_silver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ingest_raw",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "movie_*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "raw_movie_src",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "raw_movie",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "rawToBronze",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ingest_raw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "rawToBronze",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"raw": {},
									"bronze": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "bronzeToSilver",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "rawToBronze",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "bronzeToSilver",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"bronze": {},
									"genres": {},
									"originalLanguages": {},
									"updateBronze": {},
									"silver": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "movie"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/raw_movie_src')]",
				"[concat(variables('factoryId'), '/datasets/raw_movie')]",
				"[concat(variables('factoryId'), '/dataflows/rawToBronze')]",
				"[concat(variables('factoryId'), '/dataflows/bronzeToSilver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/wide_world_importers')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "iterate_oltp",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "sp_drop_integration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.oltp_table_list",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "old_watermark",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT * FROM watermarktable WHERE TableName = '@{item().TABLE_NAME}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "watermark_dataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "new_watermark",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "SELECT MAX(@{item().WaterMark_Column}) AS NewWatermarkvalue FROM @{item().TABLE_NAME}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "source_dataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "incremental_copy",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "new_watermark",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "old_watermark",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select * from @{item().TABLE_NAME} where @{item().WaterMark_Column} > '@{activity('old_watermark').output.firstRow.WatermarkValue}' and @{item().WaterMark_Column} <= '@{activity('new_watermark').output.firstRow.NewWatermarkvalue}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"sqlWriterStoredProcedureName": {
												"value": "@{item().StoredProcedureNameForMergeOperation}",
												"type": "Expression"
											},
											"sqlWriterTableType": {
												"value": "@{item().TableType}",
												"type": "Expression"
											},
											"storedProcedureTableTypeParameterName": {
												"value": "@{item().TABLE_NAME}",
												"type": "Expression"
											},
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "source_dataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "sink_dataset",
											"type": "DatasetReference",
											"parameters": {
												"sink_table_name": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "sp_write_watermark",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "incremental_copy",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[usp_write_watermark]",
										"storedProcedureParameters": {
											"LastModifiedtime": {
												"value": {
													"value": "@{activity('new_watermark').output.firstRow.NewWatermarkvalue}",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"TableName": {
												"value": {
													"value": "\t@{activity('old_watermark').output.firstRow.TableName}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_AzureSqlDatabase_OLTP",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "ods_copy",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "sp_write_watermark",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "sink_dataset",
											"type": "DatasetReference",
											"parameters": {
												"sink_table_name": {
													"value": "@{activity('old_watermark').output.firstRow.TableName}",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ods",
											"type": "DatasetReference",
											"parameters": {
												"ods_table_name": {
													"value": "@{activity('old_watermark').output.firstRow.TableName}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "integration_copy",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "ods_copy",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "sink_dataset",
											"type": "DatasetReference",
											"parameters": {
												"sink_table_name": "@{activity('old_watermark').output.firstRow.TableName}"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "integration",
											"type": "DatasetReference",
											"parameters": {
												"integration_schema_name": "dbo",
												"integration_table_name": "@{activity('old_watermark').output.firstRow.TableName}"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "sp_drop_ods",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_drop_ods_tables]"
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureSqlDatabase_ODS",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_drop_integration",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_drop_ods",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_drop_integration_tables]"
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureSqlDatabase_Integration",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_generate_olap",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "sp_drop_olap",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_generate_olap_tables]"
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureSqlDatabase_Integration",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "iterate_olap",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "sp_generate_olap",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.olap_table_list",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "olap_copy",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "integration",
											"type": "DatasetReference",
											"parameters": {
												"integration_schema_name": {
													"value": "@{item().SCHEMA_NAME}",
													"type": "Expression"
												},
												"integration_table_name": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "olap",
											"type": "DatasetReference",
											"parameters": {
												"olap_schema_name": {
													"value": "@{item().SCHEMA_NAME}",
													"type": "Expression"
												},
												"olap_table_name": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "sp_drop_olap",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "iterate_oltp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_drop_olap_tables]"
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureSqlDatabase_OLAP",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"oltp_table_list": {
						"type": "array",
						"defaultValue": [
							{
								"TABLE_NAME": "orders_table",
								"WaterMark_Column": "LastEditedWhen",
								"TableType": "DataTypeforOrdersTable",
								"StoredProcedureNameForMergeOperation": "usp_upsert_orders_table"
							},
							{
								"TABLE_NAME": "order_lines_table",
								"WaterMark_Column": "LastEditedWhen",
								"TableType": "DataTypeforOrderLinesTable",
								"StoredProcedureNameForMergeOperation": "usp_upsert_order_lines_table"
							}
						]
					},
					"olap_table_list": {
						"type": "array",
						"defaultValue": [
							{
								"SCHEMA_NAME": "Fact",
								"TABLE_NAME": "Orders"
							},
							{
								"SCHEMA_NAME": "Dimension",
								"TABLE_NAME": "Customers"
							}
						]
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureSqlDatabase_ODS')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureSqlDatabase_Integration')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureSqlDatabase_OLAP')]",
				"[concat(variables('factoryId'), '/datasets/watermark_dataset')]",
				"[concat(variables('factoryId'), '/datasets/source_dataset')]",
				"[concat(variables('factoryId'), '/datasets/sink_dataset')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureSqlDatabase_OLTP')]",
				"[concat(variables('factoryId'), '/datasets/ods')]",
				"[concat(variables('factoryId'), '/datasets/integration')]",
				"[concat(variables('factoryId'), '/datasets/olap')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_movie')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "movie"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "movies",
						"fileSystem": "bronze-movie"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_movie_tmp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "movie"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "tmp",
						"fileSystem": "bronze-movie"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/genres')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "movie"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "genres",
						"fileSystem": "silver-movie"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/integration')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_AzureSqlDatabase_Integration",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"integration_schema_name": {
						"type": "string"
					},
					"integration_table_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "wide_world_importers"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().integration_schema_name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().integration_table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureSqlDatabase_Integration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ods')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_AzureSqlDatabase_ODS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ods_table_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "wide_world_importers"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().ods_table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureSqlDatabase_ODS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/olap')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_AzureSqlDatabase_OLAP",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"olap_schema_name": {
						"type": "string"
					},
					"olap_table_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "wide_world_importers"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().olap_schema_name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().olap_table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureSqlDatabase_OLAP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/original_languages')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "movie"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "original-languages",
						"fileSystem": "silver-movie"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/raw_movie')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "movie"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "movie.json",
						"fileSystem": "raw-movie"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"movie": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"Id": {
										"type": "integer"
									},
									"Title": {
										"type": "string"
									},
									"Overview": {
										"type": "string"
									},
									"Tagline": {
										"type": "string"
									},
									"Budget": {
										"type": "number"
									},
									"Revenue": {
										"type": "number"
									},
									"ImdbUrl": {
										"type": "string"
									},
									"TmdbUrl": {
										"type": "string"
									},
									"PosterUrl": {
										"type": "string"
									},
									"BackdropUrl": {
										"type": "string"
									},
									"OriginalLanguage": {
										"type": "string"
									},
									"ReleaseDate": {
										"type": "string"
									},
									"RunTime": {
										"type": "integer"
									},
									"Price": {
										"type": "number"
									},
									"CreatedDate": {
										"type": "string"
									},
									"UpdatedDate": {
										"type": "null"
									},
									"UpdatedBy": {
										"type": "null"
									},
									"CreatedBy": {
										"type": "null"
									},
									"genres": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"name": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/raw_movie_src')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "movie"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "movie_*.json",
						"fileSystem": "raw-movie"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/silver_movie')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "movie"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "movies",
						"fileSystem": "silver-movie"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/silver_movie_tmp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "movie"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "tmp",
						"fileSystem": "silver-movie"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "value",
						"type": "UTF8"
					},
					{
						"name": "movie_id",
						"type": "INT32"
					},
					{
						"name": "title",
						"type": "UTF8"
					},
					{
						"name": "overview",
						"type": "UTF8"
					},
					{
						"name": "tagline",
						"type": "UTF8"
					},
					{
						"name": "budget",
						"type": "DOUBLE"
					},
					{
						"name": "revenue",
						"type": "DOUBLE"
					},
					{
						"name": "imdb_url",
						"type": "UTF8"
					},
					{
						"name": "tmdb_url",
						"type": "UTF8"
					},
					{
						"name": "poster_url",
						"type": "UTF8"
					},
					{
						"name": "backdrop_url",
						"type": "UTF8"
					},
					{
						"name": "original_language_id",
						"type": "INT32"
					},
					{
						"name": "release_date",
						"type": "DATE"
					},
					{
						"name": "runtime",
						"type": "INT32"
					},
					{
						"name": "price",
						"type": "DOUBLE"
					},
					{
						"name": "created_date",
						"type": "DATE"
					},
					{
						"name": "genre_id",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sink_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_AzureSqlDatabase_OLTP",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"sink_table_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "wide_world_importers"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().sink_table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureSqlDatabase_OLTP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/source_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_SqlServer_OLTP",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "wide_world_importers"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_SqlServer_OLTP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/watermark_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_AzureSqlDatabase_OLTP",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "wide_world_importers"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TableName",
						"type": "varchar"
					},
					{
						"name": "WatermarkValue",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "watermarktable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureSqlDatabase_OLTP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_AzureDataLakeStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_AzureDataLakeStorage_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_AzureDataLakeStorage_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_AzureSqlDatabase_Integration')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_AzureSqlDatabase_Integration_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_AzureSqlDatabase_ODS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_AzureSqlDatabase_ODS_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_AzureSqlDatabase_OLAP')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_AzureSqlDatabase_OLAP_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_AzureSqlDatabase_OLTP')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_AzureSqlDatabase_OLTP_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_SqlServer_Integration')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ls_SqlServer_Integration_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_SqlServer_ODS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ls_SqlServer_ODS_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_SqlServer_OLAP')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ls_SqlServer_OLAP_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_SqlServer_OLTP')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ls_SqlServer_OLTP_connectionString')]"
				},
				"connectVia": {
					"referenceName": "selfHostedIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/selfHostedIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/selfHostedIR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronzeToSilver')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "movie"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "bronze_movie_tmp",
								"type": "DatasetReference"
							},
							"name": "bronze"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "genres",
								"type": "DatasetReference"
							},
							"name": "genres"
						},
						{
							"dataset": {
								"referenceName": "original_languages",
								"type": "DatasetReference"
							},
							"name": "originalLanguages"
						},
						{
							"dataset": {
								"referenceName": "bronze_movie_tmp",
								"type": "DatasetReference"
							},
							"name": "updateBronze"
						},
						{
							"dataset": {
								"referenceName": "silver_movie_tmp",
								"type": "DatasetReference"
							},
							"name": "silver"
						}
					],
					"transformations": [
						{
							"name": "filterStatus"
						},
						{
							"name": "parseJson"
						},
						{
							"name": "flattenJson"
						},
						{
							"name": "select1"
						},
						{
							"name": "addForeignKeys"
						},
						{
							"name": "select2"
						},
						{
							"name": "genresSelect1"
						},
						{
							"name": "genresParseJson"
						},
						{
							"name": "genresFlattenJson"
						},
						{
							"name": "flattenGenres"
						},
						{
							"name": "genresDistinctRows"
						},
						{
							"name": "filterNull"
						},
						{
							"name": "genresSelect2"
						},
						{
							"name": "sort"
						},
						{
							"name": "addOriginalLanguages"
						},
						{
							"name": "originalLanguagesSelect1"
						},
						{
							"name": "originalLanguagesDistinctRows"
						},
						{
							"name": "originalLanguagesSelect2"
						},
						{
							"name": "distinctRaw"
						},
						{
							"name": "silverClean"
						},
						{
							"name": "filterClean"
						},
						{
							"name": "filterQuarantine"
						},
						{
							"name": "joinLoaded"
						},
						{
							"name": "statusLoaded"
						},
						{
							"name": "selectLoaded"
						},
						{
							"name": "joinQuarantined"
						},
						{
							"name": "statusQuarantined"
						},
						{
							"name": "selectQuarantined"
						},
						{
							"name": "union"
						}
					],
					"scriptLines": [
						"source(output(",
						"          value as string,",
						"          datasource as string,",
						"          ingestdate as date,",
						"          ingesttime as timestamp,",
						"          status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> bronze",
						"bronze filter(status == \"new\") ~> filterStatus",
						"select1 parse(nested_json = value ? (Id as integer,",
						"     Title as string,",
						"     Overview as string,",
						"     Tagline as string,",
						"     Budget as double,",
						"     Revenue as double,",
						"     ImdbUrl as string,",
						"     TmdbUrl as string,",
						"     PosterUrl as string,",
						"     BackdropUrl as string,",
						"     OriginalLanguage as string,",
						"     ReleaseDate as date,",
						"     RunTime as integer,",
						"     Price as double,",
						"     CreatedDate as date,",
						"     genres as (id as integer,",
						"     name as string)[])[],",
						"     format: 'json',",
						"     documentForm: 'documentPerLine') ~> parseJson",
						"parseJson foldDown(unroll(nested_json),",
						"     mapColumn(",
						"          value,",
						"          Id = nested_json.Id,",
						"          Title = nested_json.Title,",
						"          Overview = nested_json.Overview,",
						"          Tagline = nested_json.Tagline,",
						"          Budget = nested_json.Budget,",
						"          Revenue = nested_json.Revenue,",
						"          ImdbUrl = nested_json.ImdbUrl,",
						"          TmdbUrl = nested_json.TmdbUrl,",
						"          PosterUrl = nested_json.PosterUrl,",
						"          BackdropUrl = nested_json.BackdropUrl,",
						"          OriginalLanguage = nested_json.OriginalLanguage,",
						"          ReleaseDate = nested_json.ReleaseDate,",
						"          RunTime = nested_json.RunTime,",
						"          Price = nested_json.Price,",
						"          CreatedDate = nested_json.CreatedDate,",
						"          genres = nested_json.genres",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenJson",
						"filterStatus select(mapColumn(",
						"          value",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"flattenJson derive(genre_id = toString(genres.id),",
						"          original_language_id = 1) ~> addForeignKeys",
						"addForeignKeys select(mapColumn(",
						"          value,",
						"          movie_id = Id,",
						"          title = Title,",
						"          overview = Overview,",
						"          tagline = Tagline,",
						"          budget = Budget,",
						"          revenue = Revenue,",
						"          imdb_url = ImdbUrl,",
						"          tmdb_url = TmdbUrl,",
						"          poster_url = PosterUrl,",
						"          backdrop_url = BackdropUrl,",
						"          original_language_id,",
						"          release_date = ReleaseDate,",
						"          runtime = RunTime,",
						"          price = Price,",
						"          created_date = CreatedDate,",
						"          genre_id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"bronze select(mapColumn(",
						"          value",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> genresSelect1",
						"genresSelect1 parse(nested_json = value ? (Id as integer,",
						"     Title as string,",
						"     Overview as string,",
						"     Tagline as string,",
						"     Budget as integer,",
						"     Revenue as integer,",
						"     ImdbUrl as string,",
						"     TmdbUrl as string,",
						"     PosterUrl as string,",
						"     BackdropUrl as string,",
						"     OriginalLanguage as string,",
						"     ReleaseDate as string,",
						"     RunTime as integer,",
						"     Price as integer,",
						"     CreatedDate as string,",
						"     genres as (id as integer,",
						"     name as string)[])[],",
						"     format: 'json',",
						"     documentForm: 'documentPerLine') ~> genresParseJson",
						"genresParseJson foldDown(unroll(nested_json),",
						"     mapColumn(",
						"          genres = nested_json.genres",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> genresFlattenJson",
						"genresFlattenJson foldDown(unroll(genres),",
						"     mapColumn(",
						"          id = genres.id,",
						"          name = genres.name",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenGenres",
						"flattenGenres aggregate(groupBy(mycols = sha2(256,columns())),",
						"     each(match(true()), $$ = first($$))) ~> genresDistinctRows",
						"genresDistinctRows filter(name != \"\") ~> filterNull",
						"filterNull select(mapColumn(",
						"          id,",
						"          name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> genresSelect2",
						"genresSelect2 sort(asc(id, true)) ~> sort",
						"bronze derive(id = 1,",
						"          language = \"English\") ~> addOriginalLanguages",
						"addOriginalLanguages select(mapColumn(",
						"          id,",
						"          language",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> originalLanguagesSelect1",
						"originalLanguagesSelect1 aggregate(groupBy(mycols = sha2(256,columns())),",
						"     each(match(true()), $$ = first($$))) ~> originalLanguagesDistinctRows",
						"originalLanguagesDistinctRows select(mapColumn(",
						"          id,",
						"          language",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> originalLanguagesSelect2",
						"select2 aggregate(groupBy(value),",
						"     each(match(name!=\"value\"), $$ = first($$))) ~> distinctRaw",
						"distinctRaw filter(runtime >= 0 && budget >= 1000000) ~> silverClean",
						"distinctRaw filter(runtime < 0 || budget < 1000000) ~> filterClean",
						"distinctRaw filter(runtime >= 0 && budget >= 1000000) ~> filterQuarantine",
						"filterQuarantine, bronze join(distinctRaw@value == bronze@value,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinLoaded",
						"joinLoaded derive(status = \"loaded\") ~> statusLoaded",
						"statusLoaded select(mapColumn(",
						"          value = bronze@value,",
						"          datasource,",
						"          ingestdate,",
						"          ingesttime,",
						"          status",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectLoaded",
						"filterClean, bronze join(distinctRaw@value == bronze@value,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinQuarantined",
						"joinQuarantined derive(status = \"quarantined\") ~> statusQuarantined",
						"statusQuarantined select(mapColumn(",
						"          value = bronze@value,",
						"          datasource,",
						"          ingestdate,",
						"          ingesttime,",
						"          status",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectQuarantined",
						"selectLoaded, selectQuarantined union(byName: true)~> union",
						"sort sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> genres",
						"originalLanguagesSelect2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> originalLanguages",
						"union sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> updateBronze",
						"silverClean sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          value as string,",
						"          movie_id as integer,",
						"          title as string,",
						"          overview as string,",
						"          tagline as string,",
						"          budget as double,",
						"          revenue as double,",
						"          imdb_url as string,",
						"          tmdb_url as string,",
						"          poster_url as string,",
						"          backdrop_url as string,",
						"          original_language_id as integer,",
						"          release_date as date,",
						"          runtime as integer,",
						"          price as double,",
						"          created_date as date,",
						"          genre_id as string",
						"     ),",
						"     format: 'parquet',",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> silver"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/bronze_movie_tmp')]",
				"[concat(variables('factoryId'), '/datasets/genres')]",
				"[concat(variables('factoryId'), '/datasets/original_languages')]",
				"[concat(variables('factoryId'), '/datasets/silver_movie_tmp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/rawToBronze')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "movie"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "raw_movie",
								"type": "DatasetReference"
							},
							"name": "raw"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "bronze_movie_tmp",
								"type": "DatasetReference"
							},
							"name": "bronze"
						}
					],
					"transformations": [
						{
							"name": "flatten"
						},
						{
							"name": "stringify"
						},
						{
							"name": "addMetadata"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movie as (Id as integer, Title as string, Overview as string, Tagline as string, Budget as double, Revenue as double, ImdbUrl as string, TmdbUrl as string, PosterUrl as string, BackdropUrl as string, OriginalLanguage as string, ReleaseDate as string, RunTime as integer, Price as double, CreatedDate as string, UpdatedDate as string, UpdatedBy as string, CreatedBy as string, genres as (id as integer, name as string)[])[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> raw",
						"raw foldDown(unroll(movie),",
						"     mapColumn(",
						"          value = movie",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten",
						"flatten stringify(value = value ? string,",
						"     format: 'json') ~> stringify",
						"stringify derive(datasource = \"antrasepadlsgen2\",",
						"          ingestdate = currentDate(),",
						"          ingesttime = currentTimestamp(),",
						"          status = \"new\") ~> addMetadata",
						"addMetadata sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> bronze"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/raw_movie')]",
				"[concat(variables('factoryId'), '/datasets/bronze_movie_tmp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/silverUpdate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "movie"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "bronze_movie_tmp",
								"type": "DatasetReference"
							},
							"name": "bronze"
						},
						{
							"dataset": {
								"referenceName": "silver_movie_tmp",
								"type": "DatasetReference"
							},
							"name": "silver"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "silver_movie",
								"type": "DatasetReference"
							},
							"name": "updateSilver"
						},
						{
							"dataset": {
								"referenceName": "bronze_movie",
								"type": "DatasetReference"
							},
							"name": "updateBronze"
						}
					],
					"transformations": [
						{
							"name": "filterLoaded"
						},
						{
							"name": "select1"
						},
						{
							"name": "parseJson"
						},
						{
							"name": "flattenJson"
						},
						{
							"name": "addForeignKeys"
						},
						{
							"name": "select2"
						},
						{
							"name": "filterBudget"
						},
						{
							"name": "filterRuntime"
						},
						{
							"name": "repairRuntime"
						},
						{
							"name": "repairBudget"
						},
						{
							"name": "unionRepaired"
						},
						{
							"name": "unionSilver"
						},
						{
							"name": "distinctRaw"
						},
						{
							"name": "statusLoaded"
						}
					],
					"scriptLines": [
						"source(output(",
						"          value as string,",
						"          datasource as string,",
						"          ingestdate as date,",
						"          ingesttime as timestamp,",
						"          status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> bronze",
						"source(output(",
						"          value as string,",
						"          movie_id as integer,",
						"          title as string,",
						"          overview as string,",
						"          tagline as string,",
						"          budget as double,",
						"          revenue as double,",
						"          imdb_url as string,",
						"          tmdb_url as string,",
						"          poster_url as string,",
						"          backdrop_url as string,",
						"          original_language_id as integer,",
						"          release_date as date,",
						"          runtime as integer,",
						"          price as double,",
						"          created_date as date,",
						"          genre_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> silver",
						"bronze filter(status == \"quarantined\") ~> filterLoaded",
						"filterLoaded select(mapColumn(",
						"          value",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 parse(nested_json = value ? (Id as integer,     Title as string,     Overview as string,     Tagline as string,     Budget as double,     Revenue as double,     ImdbUrl as string,     TmdbUrl as string,     PosterUrl as string,     BackdropUrl as string,     OriginalLanguage as string,     ReleaseDate as date,     RunTime as integer,     Price as double,     CreatedDate as date,     genres as (id as integer,     name as string)[])[],",
						"     format: 'json',",
						"     documentForm: 'documentPerLine') ~> parseJson",
						"parseJson foldDown(unroll(nested_json),",
						"     mapColumn(",
						"          value,",
						"          Id = nested_json.Id,",
						"          Title = nested_json.Title,",
						"          Overview = nested_json.Overview,",
						"          Tagline = nested_json.Tagline,",
						"          Budget = nested_json.Budget,",
						"          Revenue = nested_json.Revenue,",
						"          ImdbUrl = nested_json.ImdbUrl,",
						"          TmdbUrl = nested_json.TmdbUrl,",
						"          PosterUrl = nested_json.PosterUrl,",
						"          BackdropUrl = nested_json.BackdropUrl,",
						"          OriginalLanguage = nested_json.OriginalLanguage,",
						"          ReleaseDate = nested_json.ReleaseDate,",
						"          RunTime = nested_json.RunTime,",
						"          Price = nested_json.Price,",
						"          CreatedDate = nested_json.CreatedDate,",
						"          genres = nested_json.genres",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenJson",
						"flattenJson derive(genre_id = toString(genres.id),",
						"          original_language_id = 1) ~> addForeignKeys",
						"addForeignKeys select(mapColumn(",
						"          value,",
						"          movie_id = Id,",
						"          title = Title,",
						"          overview = Overview,",
						"          tagline = Tagline,",
						"          budget = Budget,",
						"          revenue = Revenue,",
						"          imdb_url = ImdbUrl,",
						"          tmdb_url = TmdbUrl,",
						"          poster_url = PosterUrl,",
						"          backdrop_url = BackdropUrl,",
						"          original_language_id,",
						"          release_date = ReleaseDate,",
						"          runtime = RunTime,",
						"          price = Price,",
						"          created_date = CreatedDate,",
						"          genre_id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 filter(budget < 1000000) ~> filterBudget",
						"select2 filter(runtime < 0 && budget >= 1000000) ~> filterRuntime",
						"filterRuntime derive(runtime = abs(runtime)) ~> repairRuntime",
						"filterBudget derive(budget = 1000000.00,",
						"          runtime = abs(runtime)) ~> repairBudget",
						"repairRuntime, repairBudget union(byName: true)~> unionRepaired",
						"unionRepaired, silver union(byName: true)~> unionSilver",
						"unionSilver aggregate(groupBy(value),",
						"     each(match(name!=\"value\"), $$ = first($$))) ~> distinctRaw",
						"bronze derive(status = \"loaded\") ~> statusLoaded",
						"distinctRaw sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> updateSilver",
						"statusLoaded sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> updateBronze"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/bronze_movie_tmp')]",
				"[concat(variables('factoryId'), '/datasets/silver_movie_tmp')]",
				"[concat(variables('factoryId'), '/datasets/silver_movie')]",
				"[concat(variables('factoryId'), '/datasets/bronze_movie')]"
			]
		}
	]
}